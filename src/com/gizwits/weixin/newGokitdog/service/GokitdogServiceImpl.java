package com.gizwits.weixin.newGokitdog.service;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;import java.util.ArrayList;import java.util.List;import org.hibernate.Hibernate;import com.gizwits.weixin.newGokitdog.bean.Device;import com.gizwits.weixin.newGokitdog.bean.DeviceBindInfo;import com.gizwits.weixin.newGokitdog.bean.GroupmMember;import com.gizwits.weixin.newGokitdog.bean.Groups;import com.gizwits.weixin.newGokitdog.bean.UserBindingDevice;import com.gizwits.weixin.newGokitdog.db.HibernateModel;import com.gizwits.weixin.newGokitdog.service.BaseXCloudNetworkService.ResponseList;import com.gizwits.weixin.newGokitdog.service.BaseXCloudNetworkService.ResponseObject;public class GokitdogServiceImpl implements IGokitdogService {	/**	 * 获取用户设备名称	 */	@Override	public String getUserDeviceName(String openId, String deviceId) {		UserBindingDevice device = getUserBindingDevice(openId, deviceId);		if (device == null) {			return "";		}		String name = device.getName();		return name;	}	/**	 * 更新用户设备名称	 */	@Override	public boolean updateUserDeviceName(String openId, String deviceId,			String updatedName) {			UserBindingDevice userBindingDevice = getUserBindingDevice(				openId, "");		userBindingDevice.setName(updatedName);		boolean success = HibernateModel.getInstance()				.update(userBindingDevice);		return success;	}		/**	 * 获取二维码地址	 */	@Override	public String getQrCodeAddr(String mac, String deviceId)			throws UnsupportedEncodingException {		if (mac == null) {			return "";		}		DeviceBindInfo deviceInfo = getDeviceBindInfo(mac);		if (deviceInfo == null) {			return "";		}		String ticket = deviceInfo.getTicket();		if (ticket == null || ticket.isEmpty()) {			return "";		}		String qrCodeAddr = "https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket="				+ URLEncoder.encode(ticket.toString(), "utf-8");		return qrCodeAddr;	}		/**	 * 获取mac地址	 */	@Override	public String getMacAddr(String openId, String deviceId) {		UserBindingDevice device = getUserBindingDevice(openId, deviceId);		if (device == null) {			return "";		}		deviceId = device.getQrCode();		String hql = new String("select * from DeviceBindInfo where id="				+ deviceId);		List<DeviceBindInfo> list = HibernateModel.getInstance().getList(hql,				DeviceBindInfo.class);		DeviceBindInfo deviceInfo = null;		if (list != null && list.size() > 0) {			deviceInfo = list.get(0);		} else {			deviceInfo = new DeviceBindInfo();		}		return deviceInfo.getMac();	}	/**	 * 获取用户绑定的设备信息	 */	@Override	public UserBindingDevice getUserBindingDevice(String openId, String deviceId) {		boolean flag = false;		if (!deviceId.isEmpty() || deviceId == null) {			flag = true;		}		StringBuffer hql = new StringBuffer(				"select * from UserBindingDevice where openId='" + openId + "'" + " AND isUsed =1");		if (flag) {			hql.append(" AND qrCode = " + deviceId);		}		List<UserBindingDevice> list = HibernateModel.getInstance().getList(				hql.toString(), UserBindingDevice.class);		UserBindingDevice device = null;		if (list != null && list.size() > 0) {			device = list.get(0);		} else {			device = new UserBindingDevice();		}		return device;	}		/**	 * 保存二维码ticket	 */	@Override	public boolean saveTicket(String mac, String ticket) {		DeviceBindInfo deviceInfo = getDeviceBindInfo(mac);		deviceInfo.setTicket(ticket);		boolean result = HibernateModel.getInstance().update(deviceInfo);		return result;	}		/**	 * 获取用户绑定设备信息	 */	@Override	public UserBindingDevice getUserBindingDevice(String deviceId) {		String hql = new String(				"select * from UserBindingDevice where qrCode='" + deviceId						+ "'" + " AND isUsed =1");		List<UserBindingDevice> list = HibernateModel.getInstance().getList(				hql, UserBindingDevice.class);		UserBindingDevice device = null;		if (list != null && list.size() > 0) {			device = list.get(0);		} else {			device = new UserBindingDevice();		}		return device;	}		/**	 * 获取设备绑定信息	 */	@Override	public DeviceBindInfo getDeviceBindInfo(String mac) {		List<DeviceBindInfo> deviceBindInfos = HibernateModel.getInstance()				.getList(						"select * from DeviceBindInfo where mac='" + mac + "'",						DeviceBindInfo.class);		if (deviceBindInfos.size() > 0) {			return deviceBindInfos.get(0);		} else {			return null;		}	}	/**	 * 删除绑定设备	 */	@Override	public boolean deleteBindingDevice(String openId) {		UserBindingDevice boundDevice = getUserBindingDevice(openId, "");		boundDevice.setIsUsed(false);		return HibernateModel.getInstance().saveOrUpdate(boundDevice);	}		/**	 * 修改宠物名称	 */	@Override	public String getPetName(String openId){		String hql = new String(				"select * from userbindingdevice where openId='" + openId						+ "'" + " AND isUsed =1");		List<UserBindingDevice> list = HibernateModel.getInstance().getList(				hql, UserBindingDevice.class);		if(list.size()>0){			return (String) list.get(0).getName();		}else{			return "小白";		}	}						/**	 * 获取组成员列表	 */		@Override		public ResponseList<GroupmMember> getGroupMemberList(String openId, String groupId) {			ResponseList<GroupmMember> result = new ResponseList<GroupmMember>();			result.success = (ArrayList<GroupmMember>) HibernateModel					.getInstance().getList(							"select * from GroupMember where groupId=" + groupId,							GroupmMember.class);			return result;		}				/**		 * 获取组列表		 */		@Override		public ResponseList<Groups> getGroup(String openId) {			ResponseList<Groups> result = new ResponseList<Groups>();			List<Groups> groups = HibernateModel					.getInstance()					.getList(							"select * from Groups where groupId in (select GroupId from GroupMember where userId= '"									+ openId + "')", Groups.class);			result.success = groups;			return result;		}				/**		 * 获取组		 */		@Override		public ResponseObject<Groups> getGroup(String openId, int groupId) {			ResponseObject<Groups> result = new ResponseObject<Groups>();			try {				Groups groups = (Groups) HibernateModel.getInstance().get(						Groups.class, groupId);				result.success = groups;				result.result = true;			} catch (Exception e) {				e.printStackTrace();			}			return result;		}						/**		 *  获取设备绑定信息通过openid		 */		public List<DeviceBindInfo> getDeviceBindInfoByOpenId(String openId) {			List<DeviceBindInfo> infoList = new ArrayList<DeviceBindInfo>();			infoList = HibernateModel					.getInstance()					.getList(							"select * from DeviceBindInfo where id in (select qrCode from UserBindingDevice where openId = '"									+ openId + "')", DeviceBindInfo.class);			return infoList;		}				/**		 * 生成组		 */		@Override		public ResponseObject createGroup(String openId, String groupName) {			final ResponseObject result = new ResponseObject();			Groups group = new Groups();			group.setGroupName(groupName);			String groupId = HibernateModel.getInstance().save(group);			joinGroup(openId, groupId);			result.success = groupId;			return result;		}				/**		 * 加入组		 */		@Override		public ResponseObject<?> joinGroup(String openId, String groupId) {			final ResponseObject<?> result = new ResponseObject();			GroupmMember groupMember = new GroupmMember();			groupMember.setUserId(openId);			groupMember.setGroupId(groupId);			result.result = HibernateModel.getInstance().saveOrUpdate(groupMember);			return result;		}		/**		 *  数据库绑定设备		 */		@Override		public ResponseObject<?> bindingDevices(UserBindingDevice data,String openId){			ResponseObject result = new ResponseObject();						if(data == null){				return result;			}			String sql = "UPDATE UserBindingDevice SET isUsed = 0 WHERE openId = '"					+ openId + "'";			HibernateModel.getInstance().creatSql(sql);			result.result = HibernateModel.getInstance().saveOrUpdate(data);			return result;		}				/**		 *  获取设备信息		 */		@Override		public ResponseObject<?> getDeviceBindInfoByDid(String did){			ResponseObject result = new ResponseObject();						if(did == null){				return result;			}			String hql = "select *  from DeviceBindInfo where did = '"+did+"'";			List<DeviceBindInfo> list = HibernateModel.getInstance().getList(hql, DeviceBindInfo.class);			if(list != null && list.size() > 0){				DeviceBindInfo device = list.get(0);				result.success = device;				result.result = true;			}			return result;		}}